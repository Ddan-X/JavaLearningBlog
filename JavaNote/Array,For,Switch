运算：
关系比较：> , >=, <, <= , == ,!=  
&& 表示逻辑与运算符，相当于"并且"，同真为真，一假为假。A&&B 若A为假，则B不执行
• || 表示逻辑或运算符，相当于"或者"，一真为真，同假为假。A||B 若A为真，则B不执行
• ! 表示逻辑非运算符，相当于"取反"，真为假，假为真
条件表达式? 表达式1: 表达式2
判断条件表达式是否成立，若成立则执行表达式1，否则执行表达式2 。
自增减运算：
ia = 12 ； int ib = ia++; ib = 12 但是 ia 本身 ++ 后变成了 13
int ic = ++ ia; ic = 14, ia = 14 
(ia++ + ++ia)= ( 14 + 16) 首先 ia ++ = 14， ia本身++ 后 就变成了15， ++ia = 16  
当两个整数相除时结果只保留整数部分，丢弃小数部分5/2=2
(5*1.0 / 2) = 2.5让其中一个操作数乘以1.0 保留小数位，相当于操作数转换为double类型

Switch
 Case 没有break 会发生穿透：
循环里有continue表示 提前结束本次循环，继续下一次循环
Break为跳出break所在的一个循环；
跳出外层循环需要加标号  在外层 
outer: for ( ){    
for() { outer break;}
}
For(;;) 无限循环
双重for循环：
外层控制行数，内层控制列数
do{ } while (); 先do 然后再判断是否符合while条件，符合继续do
while( ); { } ; 相当于 while( ){ ; } { 内容} 不执行内容， 一直在 ； 内运行
数组在栈中储存的是 堆的地址 ，元素都在堆区里
int Arr1  [] = new int [5]; System.out.print(Arr1); 得到的是 地址， 所以必须使用循环获取数组元素
int arr2 [] = new int [5]; arr2 = Arr1; 这里相当于arr2也指向Arr1 堆的内存地址 而不是复制元素。
arr2 创建的新的地址 若是没有用到，则会被java回收

二维数组：由多个一维数组组成
	Int [ ][ ] brr = new int[2][6] ，2行6列，brr.length 代表行数 brr的元素长度, brr[0].length 第一个元素的长度，第0的列数
二维数组中可以申明， 每行不同列的数组

